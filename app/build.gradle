plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.ceiba.adnceiba"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
            testCoverageEnabled true
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task jacocoTestReport (type: JacocoReport, dependsOn: [':app:testDebugUnitTest']){

    def directoriesToCoverage = layout.files("$buildDir/tmp/kotlin-classes/debug")
    def mainSources = layout.files("$project.projectDir/src/main/java")

    def executionFilesFromConnectedAndroidTest = fileTree(
            dir: "$buildDir",
            includes: ["outputs/code_coverage/debugAndroidTest/connected/**coverage.ec"]
    )
    def executionFileForUnitTestInModule = "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"

    def executionFiles = layout.files(
            executionFilesFromConnectedAndroidTest,
            executionFileForUnitTestInModule
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([directoriesToCoverage.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }

    subprojects {
        configurations.all {
            resolutionStrategy {
                eachDependency { details ->
                    if ('org.jacoco' == details.requested.group) {
                        details.useVersion jacocoVersion
                    }
                }
            }
        }
    }

}